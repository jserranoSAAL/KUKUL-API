name: Deploy prod KUKUL_API

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      # Configura el agente SSH para conectar con el Droplet
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # Conecta al Droplet y ejecuta los comandos
      - name: Deploy to DigitalOcean Droplet
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} <<EOF
            sudo su
            cd /root/KUKUL-API  # Cambia esta ruta si tu proyecto está en otro directorio

            # Elimina el archivo .env si ya existe
            if [ -f .env ]; then
              rm .env
              echo ".env file deleted"
            else
              echo ".env file does not exist"
            fi

            # Realiza un pull del último código desde GitHub
            git pull origin main
            
            # Aquí tus comandos para reiniciar la aplicación, por ejemplo:
            echo "HOST_DB=${{ secrets.HOST_DB }}" > .env
            echo "MYSQLDB_DATABASE=${{ secrets.MYSQLDB_DATABASE }}" >> .env
            echo "NODE_DOCKER_PORT=${{ secrets.NODE_DOCKER_PORT }}" >> .env
            echo "PORT_DB=${{ secrets.PORT_DB }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "PORT=${{ secrets.PORT }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "SECRET=${{ secrets.SECRET }}" >> .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
            echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
            
            
            docker-compose build  # Construir imágenes de Docker
            docker-compose up -d db  # Iniciar base de datos en segundo plano
            
            # Espera a que la base de datos esté lista antes de crear la DB
            sleep 20  # Espera unos segundos para asegurarse que la base de datos está levantada

            # Crea la base de datos si no existe
            docker exec -i $(docker-compose ps -q db) mysql -u${{ secrets.DB_USER }} -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};"
            
            # Inicia la aplicación
            docker-compose up -d app  # Inicia la app en segundo plano
          EOF